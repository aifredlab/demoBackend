plugins {
	id 'java'
	id 'application'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'com.google.protobuf' version '0.9.4'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

// IMPORTANT: You probably want the non-SNAPSHOT version of gRPC. Make sure you are looking at a tagged version of the example and not "master"!
def grpcVersion = '1.58.0' // CURRENT_GRPC_VERSION
def protobufVersion = '3.24.0'
def protocVersion = protobufVersion


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	maven {
		url "https://maven-central.storage-download.googleapis.com/maven2/" }
	mavenCentral()
}

dependencies {
	implementation "io.grpc:grpc-protobuf:${grpcVersion}"
	implementation "io.grpc:grpc-services:${grpcVersion}"
	implementation "io.grpc:grpc-stub:${grpcVersion}"
	compileOnly "org.apache.tomcat:annotations-api:6.0.53"

	implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

	runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

	testImplementation "io.grpc:grpc-testing:${grpcVersion}"
	testImplementation "junit:junit:4.13.2"
	testImplementation "org.mockito:mockito-core:3.4.0"



	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	//implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.4.5'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'


	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	runtimeOnly 'com.mysql:mysql-connector-j'
	//runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:버전'
	implementation 'com.h2database:h2'

	// Apache Tika 종속성 추가
	implementation group: 'org.apache.tika', name: 'tika-core', version: '2.9.0'
	implementation group: 'org.apache.tika', name: 'tika-parsers', version: '2.9.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

protobuf {
	protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
	plugins {
		grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
	}
	generateProtoTasks {
		all()*.plugins { grpc {} }
	}
}

sourceSets {whg
	main {
		java {
			srcDirs 'build/generated/source/proto/main/grpc'
			srcDirs 'build/generated/source/proto/main/java'
		}
	}
}

startScripts.enabled = false

def createStartScripts(String mainClassName) {
	String bareName = mainClassName.substring(mainClassName.lastIndexOf('.') + 1);
	String taskName = bareName.uncapitalize();
	def newTask = tasks.register(taskName, CreateStartScripts) {
		mainClass = mainClassName
		applicationName = taskName.replaceAll('([A-Z])') { '-' + it[0].uncapitalize() }
		outputDir = new File(project.buildDir, 'tmp/scripts/' + name)
		classpath = startScripts.classpath
	}
	application {
		applicationDistribution.into('bin') {
			from(newTask)
			fileMode = 0755
		}
	}
}
createStartScripts('aifred.demo.DemoClient')

